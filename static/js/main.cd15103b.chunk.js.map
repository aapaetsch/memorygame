{"version":3,"sources":["components/gameComponents.js","components/memoryGame.js","components/gameOptions.js","App.js","serviceWorker.js","index.js"],"names":["GameTile","props","cardStyles","players","cp","style","width","className","onClick","tileClick","id","clicked","matched","src","alt","PlayerStats","p1Class","p2Class","currentPlayer","color","matches","numToWord","require","winnerMessage","Modal","info","title","content","toWords","winner","diff","Math","abs","success","undefined","time","turns","Countdown","Statistic","Timer","state","timeLimit","winShown","nextProps","nextState","nextContext","this","newGame","paused","prevProps","prevState","snapshot","setState","Date","now","limit","timeRemaining","timeString","getMinutes","getSeconds","getMilliseconds","showWinMessage","display","format","value","onFinish","limitReached","Component","MemoryGame","getImages","images","i","push","allCards","randomizeCards","uniqueCards","boardSize","cards","slice","setBoard","isProcessing","remaining","1","2","selected","newGameTrigger","cardDeck","length","j","floor","random","temp","gameBoard","handleTileClick","e","index","target","message","warning","gameStarted","timeout","checkWin","endTurn","error","timeoutLength","setTimeout","endGame","timeLimitReached","loserMessage","soloWinMessage","showMessage","myGameBoard","k","row","cell","align","justify","span","Option","Select","GameOptions","startGame","values","fieldChange","name","layout","textAlign","initialValues","onFinishFailed","startGameFailed","onFieldsChange","size","type","htmlType","Item","label","min","max","disabled","App","startNewGame","gameRef","current","createRef","optionSizes","gameSizes","gutter","bordered","height","ref","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.cd15103b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Statistic, Modal } from 'antd';\r\nimport '../App.css';\r\n\r\nexport const GameTile = (props) => {\r\n    let cardStyles = 'gameCol';\r\n    if (props.players === 2){\r\n        cardStyles += ` gameColP${props.cp}`\r\n    }\r\n\r\n    return (\r\n        <div\r\n            style={{width: `${props.width}%`}}\r\n            className={cardStyles}\r\n            onClick={props.tileClick}\r\n            id={props.id}\r\n        >\r\n            {(props.clicked || props.matched) ?\r\n                (\r\n                    <img\r\n                        id={props.id}\r\n                        className='imageResize'\r\n                        src={props.src}\r\n                        alt={<span>{props.src}</span>}/>\r\n                ) : (\r\n                    <img\r\n                        id={props.id}\r\n                        className='imageResize'\r\n                        src='/images/questionmark.png'\r\n                        alt=''/>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const PlayerStats = props => {\r\n    let p1Class = 'playerStat';\r\n    let p2Class = 'playerStat';\r\n    if (props.currentPlayer === 1){\r\n        p1Class += ' playerStatTurn'\r\n    } else {\r\n        p2Class += ' playerStatTurn'\r\n    }\r\n    return (\r\n        <div>\r\n            <span\r\n                className={p1Class}\r\n                style={{color: '#ffec3d'}}>P1 Matches: {props.matches[1]}</span>\r\n            <br/>\r\n            <span\r\n                className={p2Class}\r\n                style={{color: '#ff4d4f'}}>P2 Matches: {props.matches[2]}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst numToWord = require('number-to-words');\r\nexport const winnerMessage = props => {\r\n    if (props.players === 2) {\r\n\r\n        if (props.matches[1] === props.matches[2]) {\r\n\r\n            return Modal.info({\r\n                title: 'Draw!',\r\n                content: `Both players found ${numToWord.toWords(props.matches[1])} pairs!`\r\n            });\r\n\r\n        } else {\r\n\r\n            let winner = 1;\r\n            if (props.matches[1] < props.matches[2]) {\r\n                winner = 2;\r\n            }\r\n\r\n            const diff = Math.abs(props.matches[1] - props.matches[2]);\r\n\r\n\r\n            return Modal.success({\r\n                title: `Player ${winner} Wins!`,\r\n                content: `Player ${winner} has ${numToWord.toWords(diff)} more pairs than player ${3 - winner}.`\r\n            });\r\n        }\r\n    } else {\r\n\r\n        if (props.time !== undefined){\r\n            return Modal.success({\r\n                title: 'Winner!',\r\n                content: `Player took ${props.turns} turns and had ${props.time} remaining. `\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const loserMessage = props => {\r\n    return (\r\n        Modal.error({\r\n            title: 'You Lose!',\r\n            content: `You took ${props.turns} turns and have run out of time with ${props.remaining} pairs remaining.`\r\n        })\r\n    )\r\n}\r\n\r\nconst { Countdown } = Statistic;\r\nexport class Timer extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            timeLimit: 0\r\n        }\r\n        //Set state takes too long to assign winShown.\r\n        this.winShown = false;\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n        return this.props.newGame !== nextProps.newGame\r\n            || this.props.paused !== nextProps.paused\r\n            || this.state.timeLimit !== nextState.timeLimit;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n        if (this.props.newGame !== prevProps.newGame){\r\n            this.setState({timeLimit: Date.now() + (this.props.limit * 60000)});\r\n            this.winShown = false;\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        if (this.props.paused){\r\n\r\n            const timeRemaining = new Date(this.state.timeLimit - Date.now());\r\n            const timeString = `${timeRemaining.getMinutes()}:${timeRemaining.getSeconds()}:${timeRemaining.getMilliseconds()}`\r\n\r\n            this.props.showWinMessage(timeString, this.winShown);\r\n            this.winShown = true;\r\n\r\n            return (\r\n                <div>\r\n                    <span className='countdownTimer timerLabel'>Time Remaining:</span>\r\n                    <h2 style={{color: '#fff', display: 'inline-block'}}>{timeString}</h2>\r\n                </div>\r\n                )\r\n\r\n        } else {\r\n\r\n            return (\r\n                <div>\r\n                    <span className='countdownTimer timerLabel'>Time Remaining:</span>\r\n                    <Countdown\r\n                        format='m:ss:SSS'\r\n                        className='countdownTimer'\r\n                        value={this.state.timeLimit}\r\n                        onFinish={this.props.limitReached}\r\n                    />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport {message, Row, Col} from 'antd';\r\nimport {GameTile, Timer, PlayerStats, winnerMessage, loserMessage} from './gameComponents';\r\nimport '../App.css';\r\n\r\n\r\n\r\nexport default class MemoryGame extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            selected: null,\r\n            gameBoard: [],\r\n            remaining: -1,\r\n            newGameTrigger: 0,\r\n            matches: { 1:0, 2:0 },\r\n            turns: 0,\r\n            currentPlayer: 1,\r\n        }\r\n        this.isProcessing = false;\r\n\r\n    }\r\n    componentDidMount() {\r\n        this.allCards = this.getImages();\r\n        this.setBoard([...this.allCards].slice(0,13));\r\n    }\r\n\r\n    getImages = () => {\r\n        //this method gets all of the images for the game cards\r\n        const images = [];\r\n        for (let i = 1; i < 28; i++){\r\n            images.push(`/images/green${i}.png`);\r\n            images.push(`/images/red${i}.png`);\r\n            images.push(`/images/purple${i}.png`);\r\n        }\r\n\r\n        return images;\r\n    }\r\n\r\n    newGame = () => {\r\n        //Shuffle the deck of cards\r\n        this.allCards = this.randomizeCards([...this.allCards]);\r\n\r\n        //Generate all unique card pairings\r\n        const uniqueCards = (this.props.boardSize * (this.props.boardSize - 1)) / 2;\r\n        let cards = this.allCards.slice(0, uniqueCards);\r\n        //Shuffle the deck of pairs\r\n        cards = this.randomizeCards([...cards, ...cards]);\r\n\r\n        this.setBoard(cards);\r\n        this.isProcessing = false;\r\n        this.setState({\r\n            remaining: uniqueCards,\r\n            currentPlayer: 1,\r\n            matches: { 1:0, 2:0 },\r\n            selected: null,\r\n            turns: 0,\r\n            newGameTrigger: this.state.newGameTrigger + 1});\r\n    }\r\n\r\n    randomizeCards = (cardDeck) => {\r\n        let cards = [...cardDeck];\r\n        //Fisher-Yates Shuffle\r\n        for (let i = cards.length - 1; i > 0; i--){\r\n            //shuffle every position but index 0 to prevent both i and j from being 0\r\n            const j = Math.floor(Math.random() * i);\r\n            const temp = cards[i];\r\n            cards[i] = cards[j];\r\n            cards[j] = temp;\r\n        }\r\n        return cards;\r\n    }\r\n\r\n    setBoard = (cards) => {\r\n        //This method sets the props for each game tile\r\n        let gameBoard = [];\r\n        for (let i = 0; i < cards.length; i++){\r\n            gameBoard.push({id: i, clicked: false, matched: false, src: cards[i]});\r\n        }\r\n\r\n        this.setState({gameBoard: gameBoard});\r\n    }\r\n\r\n    handleTileClick = (e) => {\r\n\r\n        let index = e.target.id;\r\n        if (index === this.state.selected){\r\n            message.warning('Card is already selected', 1);\r\n\r\n        } else if (!this.isProcessing && this.props.gameStarted) {\r\n            this.isProcessing = true;\r\n\r\n            let gameBoard = [...this.state.gameBoard];\r\n            if (!gameBoard[index].matched && !gameBoard[index].clicked){\r\n                gameBoard[index].clicked = true;\r\n\r\n                if (this.state.selected === null){\r\n                    //If the user has not selected another card this turn, store the currently selected card\r\n                    this.setState({selected: index, gameBoard: gameBoard});\r\n                    this.isProcessing = false;\r\n\r\n                } else {\r\n                    //If the user has selected 2 cards, check if they are the same image\r\n                    if (gameBoard[this.state.selected].src === gameBoard[index].src){\r\n                        //Keep the card uncovered if they match\r\n                        gameBoard[index].matched = true;\r\n                        gameBoard[this.state.selected].matched = true;\r\n\r\n                        //Increment a players matches if they are the same (only for 2p game)\r\n                        let matches = {...this.state.matches}\r\n                        matches[this.state.currentPlayer] += 1\r\n\r\n                        this.setState({\r\n                            remaining: this.state.remaining - 1,\r\n                            matches: matches,\r\n                        }, () => {\r\n                            let timeout = 0;\r\n                            if (this.props.players === 2){\r\n                                timeout = 500;\r\n                            }\r\n\r\n                            this.checkWin();\r\n                            this.endTurn(gameBoard,timeout);\r\n                        });\r\n\r\n                    } else {\r\n                        //If the two cards are not the same image, revert them back to covered\r\n                        this.setState({ gameBoard: [...gameBoard] },  () => {\r\n                            gameBoard[index].clicked = false;\r\n                            gameBoard[this.state.selected].clicked = false;\r\n                            this.endTurn(gameBoard, 500);\r\n                        });\r\n                    }\r\n                }\r\n            } else {\r\n                this.isProcessing = false;\r\n            }\r\n        } else if (!this.props.gameStarted) {\r\n            message.error(\"Please start a new game!\");\r\n        }\r\n    }\r\n\r\n    endTurn = (gameBoard, timeoutLength) => {\r\n        setTimeout( () => {\r\n            this.setState({\r\n                turns: this.state.turns + 1,\r\n                selected: null,\r\n                gameBoard: gameBoard,\r\n                currentPlayer: 3 - this.state.currentPlayer,\r\n            });\r\n            this.isProcessing = false;\r\n        }, timeoutLength);\r\n    }\r\n\r\n    checkWin = () => {\r\n        //If there are no remaining matches, show a win notification\r\n        if (this.state.remaining === 0){\r\n            winnerMessage({matches: this.state.matches, players: this.props.players} );\r\n            this.props.endGame();\r\n        }\r\n    }\r\n\r\n    timeLimitReached = () => {\r\n        //End the game and show a lose message if timelimit is reached\r\n        this.props.endGame();\r\n        loserMessage({remaining: this.state.remaining, turns: this.state.turns});\r\n        this.isProcessing = false;\r\n    }\r\n\r\n    soloWinMessage = (time, showMessage) => {\r\n        //Show a different win message for single player game\r\n        if (!showMessage){\r\n            winnerMessage({turns: this.state.turns, players: this.props.players, time: time});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        //Create the gameboard with new states on each render.\r\n        let myGameBoard=[];\r\n        const width = (1 / (this.props.boardSize)) * 85;\r\n        let k = 0;\r\n\r\n        for (let i = 0; i < this.props.boardSize - 1; i++){\r\n            let row = [];\r\n\r\n            for (let j = 0; j < this.props.boardSize; j++){\r\n\r\n                const cell = (\r\n                    <GameTile\r\n                        {...this.state.gameBoard[k]}\r\n                        width={width}\r\n                        tileClick={this.handleTileClick}\r\n                        cp={this.state.currentPlayer}\r\n                        players={this.props.players}\r\n                    />)\r\n\r\n                row.push(cell);\r\n                k++;\r\n            }\r\n\r\n            myGameBoard.push(<div className='gameRow' >{row}</div>)\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Row align='middle' justify='center' className='cardHeader'>\r\n                    <Col span={8}>\r\n                        {this.props.players === 2 ?\r\n                            (\r\n                                <PlayerStats matches={this.state.matches} currentPlayer={this.state.currentPlayer}/>\r\n                            ) : (\r\n                                <Timer\r\n                                    newGame={this.state.newGameTrigger}\r\n                                    paused={this.state.remaining === 0}\r\n                                    limit={this.props.timeLimit}\r\n                                    limitReached={this.timeLimitReached}\r\n                                    showWinMessage={this.soloWinMessage}\r\n                                />\r\n                            )\r\n                        }\r\n                    </Col>\r\n                    <Col span={8}>\r\n                        <h2 style={{color: '#fff'}}>Memory Game</h2>\r\n                    </Col>\r\n                    <Col span={8}/>\r\n                </Row>\r\n                <div className='cardBody'>\r\n                    {myGameBoard}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Form, Button, Select, message, InputNumber } from 'antd';\r\nimport '../App.css';\r\n\r\nconst { Option } = Select;\r\n\r\n\r\nexport default class GameOptions extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            players: 1,\r\n        }\r\n    }\r\n\r\n    startGame = (values) => {\r\n        this.props.newGame(values);\r\n    }\r\n\r\n    fieldChange = (value, e) => {\r\n        if (value[0] !== undefined){\r\n            if (value[0].name[0] === 'players'){\r\n                this.setState({players: value[0].value});\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const onFinishFailed = (error) => {\r\n            message.error('There was an error starting the game.');\r\n            this.props.startGameFailed();\r\n        }\r\n\r\n        return (\r\n            <Form\r\n                name='MemoryGameOptions'\r\n                layout={this.state.width < 700 ? ('inline') : ('vertical')}\r\n                style={{textAlign: 'center'}}\r\n                initialValues={{players: 1, boardSize: 4, timeLimit: 3}}\r\n                onFinish={this.startGame}\r\n                onFinishFailed={onFinishFailed}\r\n                onFieldsChange={this.fieldChange}\r\n                size='small'\r\n            >\r\n                <Button type='primary' htmlType='submit'>\r\n                    New Game!\r\n                </Button>\r\n                <br/><br/>\r\n                <Form.Item name='boardSize' label='Board' >\r\n                    <Select>\r\n                        <Option value={4}>3 x 4</Option>\r\n                        <Option value={5}>4 x 5</Option>\r\n                        <Option value={6}>5 x 6</Option>\r\n                        <Option value={7}>6 x 7</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name='players' label='Players'>\r\n                    <Select>\r\n                        <Option value={1}>1</Option>\r\n                        <Option value={2}>2</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name='timeLimit' label='Time Limit' style={{textAlign: 'left'}}>\r\n                    <InputNumber\r\n                        min={1}\r\n                        max={10}\r\n                        disabled={this.state.players === 2}\r\n                    />\r\n                </Form.Item>\r\n            </Form>\r\n        );\r\n    }\r\n}","import React, { Component, createRef } from 'react';\r\nimport { Row, Col, Card} from 'antd';\r\nimport MemoryGame from './components/memoryGame';\r\nimport GameOptions from \"./components/gameOptions\";\r\nimport './App.css';\r\n\r\n\r\nexport default class App extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            boardSize: 4,\r\n            gameStarted: false,\r\n            players: 1,\r\n            timeLimit: 3,\r\n        }\r\n        this.gameRef = createRef();\r\n    }\r\n\r\n\r\n    startNewGame = (values) => {\r\n        this.setState({...values, gameStarted: true}, () => {\r\n            this.gameRef.current.newGame()\r\n        });\r\n\r\n    }\r\n\r\n    endGame = () => {\r\n        this.setState({gameStarted: false});\r\n    }\r\n\r\n    render() {\r\n        const optionSizes = {\r\n            'xs': 7,\r\n            'sm': 7,\r\n            'md': 6,\r\n            'lg': 5,\r\n            'xl': 4\r\n        }\r\n        const gameSizes = {\r\n            'xs': 17,\r\n            'sm': 17,\r\n            'md': 17,\r\n            'lg': 18,\r\n            'xl': 19\r\n        }\r\n        return (\r\n            <div className='gamePageBackground'>\r\n                <Row align='top' justify='center' gutter={[8, 8]} >\r\n                    <Col {...optionSizes}>\r\n                        {/*Game Options*/}\r\n                        <Card title='Options' bordered={false} style={{height: '100%'}} >\r\n                            <GameOptions newGame={this.startNewGame} startGameFailed={this.endGame}/>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col {...gameSizes}>\r\n                        {/*Game Board*/}\r\n                        <MemoryGame\r\n                            ref={this.gameRef}\r\n                            {...this.state}\r\n                            endGame={this.endGame}\r\n                            newGame={this.startNewGame}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n      );\r\n    }\r\n}\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}